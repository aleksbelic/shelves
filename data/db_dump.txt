create table public.author (
  id bigint generated by default as identity not null,
  name text not null,
  constraint author_pkey primary key (id),
  constraint author_name_key unique (name)
) TABLESPACE pg_default;

create table public.publisher (
  id bigint generated by default as identity not null,
  name character varying not null,
  constraint publisher_pkey primary key (id),
  constraint publisher_name_key unique (name)
) TABLESPACE pg_default;

create table public.reading_status (
  id bigint generated by default as identity not null,
  name text not null,
  constraint reading_status_pkey primary key (id),
  constraint reading_status_name_key unique (name)
) TABLESPACE pg_default;

create table public.language (
  id bigint generated by default as identity not null,
  name text not null,
  code text not null,
  constraint language_pkey primary key (id),
  constraint language_code_key unique (code),
  constraint language_name_key unique (name)
) TABLESPACE pg_default;

create table public.book (
  id bigint generated by default as identity not null,
  title text not null,
  publisher_id bigint not null,
  isbn text not null,
  edition bigint null,
  publish_year bigint null,
  language_id bigint not null,
  constraint book_pkey primary key (id),
  constraint book_isbn_key unique (isbn),
  constraint book_language_id_fkey foreign KEY (language_id) references language (id) on update CASCADE on delete RESTRICT,
  constraint book_publisher_id_fkey foreign KEY (publisher_id) references publisher (id) on update CASCADE on delete RESTRICT,
  constraint book_isbn_check check ((length(isbn) <= 20))
) TABLESPACE pg_default;

create table public.genre (
  id bigint generated by default as identity not null,
  name text not null,
  constraint genre_pkey primary key (id),
  constraint genre_name_key unique (name)
) TABLESPACE pg_default;

create table public.book_author (
  book_id bigint not null,
  author_id bigint not null,
  constraint book_author_pkey primary key (book_id, author_id),
  constraint book_author_author_id_fkey foreign KEY (author_id) references author (id) on update CASCADE on delete RESTRICT,
  constraint book_author_book_id_fkey foreign KEY (book_id) references book (id) on update CASCADE on delete RESTRICT
) TABLESPACE pg_default;

create table public.book_reading_status (
  book_id bigint not null,
  reading_status_id bigint not null,
  constraint book_reading_status_pkey primary key (book_id, reading_status_id),
  constraint book_reading_status_book_id_fkey foreign KEY (book_id) references book (id) on update CASCADE on delete RESTRICT,
  constraint book_reading_status_reading_status_id_fkey foreign KEY (reading_status_id) references reading_status (id) on update CASCADE on delete RESTRICT
) TABLESPACE pg_default;

create table public.book_genre (
  book_id bigint not null,
  genre_id bigint not null,
  constraint book_genre_pkey primary key (book_id, genre_id),
  constraint book_genre_book_id_fkey foreign KEY (book_id) references book (id) on update CASCADE on delete RESTRICT,
  constraint book_genre_genre_id_fkey foreign KEY (genre_id) references genre (id) on update CASCADE on delete RESTRICT
) TABLESPACE pg_default;

INSERT INTO "public"."author" ("id", "name") VALUES ('1', 'Vladimir Belić'), ('2', 'Emilo Belić'), ('3', 'Miloš Janković'), ('4', 'Tomislav Gavrić'), ('5', 'Dragan Simović'), ('6', 'Dan Brown'), ('7', 'Nenad Džoni Racković'), ('8', 'Aleksa Gajić');

INSERT INTO "public"."publisher" ("id", "name") VALUES ('1', 'Medija centar "Odbrana"'), ('2', 'Solaris'), ('3', 'System comics');

INSERT INTO "public"."book" ("id", "title", "publisher_id", "isbn", "edition", "publish_year", "language_id") VALUES ('1', 'Vojvoda Radomir Putnik', '1', '9788633505253', '3', '2024', '2'), ('2', 'Vojvoda Stepa Stepanović', '1', '9788633505246', '3', '2024', '2'), ('3', 'Vojvoda Živojin Mišić', '1', '9788633505260', '3', '2024', '2'), ('4', 'Vojvoda Petar Bojović', '1', '9788633505277', '3', '2024', '2'), ('5', 'Digitalna tvrđava', '2', '9788675600831', '2', '2010', '3'), ('6', 'Kralj ničega', '3', '9788689309874', null, '2024', '3'), ('7', 'Pakleno srce Kabal', '4', '9788660390853', null, '2025', '3'), ('8', 'Avanture Šerloka Holmsa', '5', '9788610015508', null, '2015', '3'), ('9', 'Paviljon br. 6', '6', '9788660340155', null, '2020', '2'), ('10', 'Edge of tomorrow', '7', '9781421576947', null, '2014', '1'), ('11', 'Poslednja kuća u ulici', '8', '9788652148417', null, '2023', '3'), ('12', 'Od šapata do vriska', '8', '9788652150465', null, '2024', '3'), ('13', 'Gebels: gospodar istinite laži', '9', '9788680636139', null, '2018', '3'), ('14', 'Dvor kneza Mihaila Obrenovića 1860 - 1868. ', '8', '9788652155071', null, '2025', '3'), ('15', 'Ratnici Crne ruke: besmrtna prethodnica', '10', '9788651513537', '3', '2020', '2'), ('16', 'Pod kupolom', '5', '9788610007169', '2', '2025', '3'), ('17', 'Zadužbina', '11', '9788677020897', null, '2017', '3'), ('18', 'Zadužbina i carstvo', '11', '9788677020910', null, '2009', '3'), ('19', 'Druga zadužbina', '11', '9788677020903', null, '2019', '3'), ('20', 'Understanding Cryptography: A Textbook for Students and Practitioners', '12', '9783642041006', null, '2010', '1'), ('21', 'Poslednja straža', '13', '9788687933972', null, '2021', '2'), ('22', 'Zov karaule', '13', '9788687933989', null, '2021', '2'), ('23', 'Besmrtni bataljon', '13', '9788687933996', null, '2021', '2'), ('24', 'Beograd večiti grad: sentimentalno putovanje kroz istoriju', '14', '9788692005329', '12', '2023', '2'), ('25', 'Karmila', '15', '9788676743353', null, '2020', '3');

INSERT INTO "public"."genre" ("id", "name") VALUES ('1', 'scy-fi'), ('2', 'thriller'), ('3', 'historical fiction'), ('4', 'horror'), ('5', 'fantasy'), ('6', 'romance'), ('7', 'biography'), ('8', 'dystopian'), ('9', 'mystery'), ('10', 'graphic novel'), ('11', 'short stories'), ('12', 'autobiography'), ('13', 'historical'), ('14', 'true crime'), ('15', 'comedy'), ('16', 'crime fiction'), ('17', 'textbook'), ('18', 'mathematics'), ('19', 'science'), ('20', 'military');

INSERT INTO "public"."reading_status" ("id", "name") VALUES ('1', 'finished'), ('2', 'want to read'), ('3', 'in progress');

INSERT INTO "public"."book_author" ("book_id", "author_id") VALUES ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('4', '5'), ('5', '6'), ('6', '7'), ('6', '8');

INSERT INTO "public"."book_genre" ("book_id", "genre_id") VALUES ('5', '2'), ('8', '9'), ('8', '16'), ('10', '1'), ('12', '4'), ('14', '7'), ('14', '13'), ('17', '1'), ('18', '1'), ('19', '1'), ('20', '17'), ('20', '18'), ('21', '13'), ('21', '20'), ('22', '13'), ('22', '20'), ('23', '13'), ('23', '20'), ('24', '13'), ('25', '4');

INSERT INTO "public"."book_reading_status" ("book_id", "reading_status_id") VALUES ('5', '1'), ('6', '3'), ('7', '3');

CREATE OR REPLACE VIEW public.books_full_view
WITH (security_invoker = on) AS
SELECT
  b.id,
  b.title,
  ARRAY_AGG(DISTINCT a.name ORDER BY a.name) AS author,
  p.name AS publisher_name,
  b.isbn,
  ARRAY_AGG(DISTINCT g.name ORDER BY g.name) AS genre,
  b.publish_year,
  b.edition,
  l.name AS language_name,
  rs.name AS reading_status_name
FROM
  public.book b
JOIN
  public.publisher p ON b.publisher_id = p.id
JOIN
  public.language l ON b.language_id = l.id
LEFT JOIN
  public.book_author ba ON b.id = ba.book_id
LEFT JOIN
  public.author a ON ba.author_id = a.id
LEFT JOIN
  public.book_genre bg ON b.id = bg.book_id
LEFT JOIN
  public.genre g ON bg.genre_id = g.id
LEFT JOIN
  public.book_reading_status brs ON b.id = brs.book_id
LEFT JOIN
  public.reading_status rs ON brs.reading_status_id = rs.id
GROUP BY
  b.id, b.title, b.isbn, b.edition, b.publish_year,
  p.name, l.name, rs.name;

CREATE POLICY anon_select_book ON public.book
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY anon_select_publisher ON public.publisher
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY anon_select_language ON public.language
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY anon_select_book_author ON public.book_author
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY anon_select_author ON public.author
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY anon_select_book_reading_status ON public.book_reading_status
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY anon_select_reading_status ON public.reading_status
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY anon_select_genre ON public.genre
  FOR SELECT
  TO anon
  USING (true);

CREATE POLICY anon_select_book_genre ON public.book_genre
  FOR SELECT
  TO anon
  USING (true);
